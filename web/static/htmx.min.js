(function(){
  var htmx = {
    process: function(elt) {
      var elements = elt.querySelectorAll('[hx-get], [hx-post], [hx-put], [hx-delete]');
      elements.forEach(function(el) {
        var method = el.getAttribute('hx-get') ? 'GET' :
            el.getAttribute('hx-post') ? 'POST' :
                el.getAttribute('hx-put') ? 'PUT' : 'DELETE';
        var events = [];

        // Only listen to submit for forms, click for everything else
        if (el.tagName === 'FORM') {
          events = ['submit'];
        } else {
          events = ['click'];
        }

        events.forEach(function(evt) {
          el.addEventListener(evt, function(e) {
            e.preventDefault();

            // Handle confirmation dialogs
            var confirm = el.getAttribute('hx-confirm');
            if (confirm && !window.confirm(confirm)) {
              return;
            }

            var url = el.getAttribute('hx-' + method.toLowerCase()) ||
                (el.tagName === 'FORM' ? el.action : '');
            var target = document.querySelector(el.getAttribute('hx-target') || 'body');
            var swap = el.getAttribute('hx-swap') || 'innerHTML';

            var body = null;
            if (el.tagName === 'FORM') {
              var formData = new FormData(el);
              // For GET requests, append form data as URL parameters
              if (method === 'GET') {
                var params = new URLSearchParams(formData);
                url = url + (url.includes('?') ? '&' : '?') + params.toString();
              } else {
                body = formData;
              }
            }

            fetch(url, { method: method, body: body })
                .then(r => r.text())
                .then(html => {
                  // Extract base swap type (remove modifiers like "swap:1s")
                  var swapType = swap.split(' ')[0];
                  
                  if (swapType === 'innerHTML') {
                    target.innerHTML = html;
                  }
                  else if (swapType === 'outerHTML') {
                    var parent = target.parentNode;
                    if (html.trim() === '') {
                      // For empty responses (like DELETE), remove the element
                      target.remove();
                    } else {
                      target.outerHTML = html;
                    }
                    if (parent) htmx.process(parent);
                    return;
                  }
                  else if (swapType.includes('afterbegin')) {
                    target.insertAdjacentHTML('afterbegin', html);
                  }
                  htmx.process(target);
                  
                  // Trigger custom events
                  var trigger = el.getAttribute('hx-trigger-response');
                  if (trigger) {
                    document.body.dispatchEvent(new Event(trigger));
                  }
                })
                .catch(function(err) {
                  console.error('HTMX request failed:', err);
                });
          });
        });
      });
    }
  };
  window.htmx = htmx;
  document.addEventListener('DOMContentLoaded', function() { htmx.process(document.body); });
})();
